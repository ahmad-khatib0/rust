$ rustup install <version>
$ rustup default <version>
# switch between different Rust versions for a specific project
$ rustup override set <version>
$ rustup update
$ rustup self uninstall

$ cargo new project   --vcs      # escape git
$ cargo new project_name
$ cargo new restaurant --lib     # crate 
$ cargo build 
$ cargo run 
$ cargo check
$ cargo clean                    # clean generated files 

$ cargo build --release 
  to compile it with optimizations. This command will create an executable in target/release instead 
  of target/debug. The optimizations make your Rust code run faster, but turning them on lengthens the
  time it takes for your program to compile. This is why there are two different profiles: one for 
  development, when you want to rebuild quickly and often, and another for building the final program 
  you’ll give to a user that won’t be rebuilt repeatedly and that will run as fast as possible. 
  If you’re benchmarking your code’s running time, be sure to run cargo build --release and benchmark
  with the executable in target/release.

$ cargo update

# build the doc for crate used in the project
$ cargo doc --open

$ env RUST_BACKTRACE=1 

# If you don’t want to run the tests in parallel
$ cargo test -- --test-threads=1

# Showing Function Output (like println)
$ cargo test -- --show-output

# run only one test 
$ cargo test this_test_will_pass       

# ran all tests with add in the name: 
$ cargo test add 

$ cargo test -- --ignored
$ cargo test -- --include-ignored

# run a particular integration test function
$ cargo test --test integration_test

$ cargo publish

# Deprecating Versions from Crates.io with cargo yank
$ cargo yank --vers 1.0.1

# you can also undo a yank and allow projects to start depending on a version again
$ cargo yank --vers 1.0.1 --undo

# specify which package in the workspace we want to run
$ cargo run -p adder  

# specify which package and which binary in the workspace we want to run
$ cargo run -p tutor-nodb --bin basic-server

# run tests for one particular crate in a workspace
$ cargo test -p add_one

# If you publish the crates in the workspace to https://crates.io, each crate in the workspace will 
  need to be published separately. Like cargo test, we can publish a particular crate in our workspace
  by using the -p flag and specifying the name of the crate we want to publish.
$ cargo publish -p adder

