- Concurrent programming, in which different parts of a program execute independently, and parallel 
  programming, in which different parts of a program execute at the same time, are becoming 
  increasingly important as more computers take advantage of their multiple processors.

-- Some Of Concurrent programming problems:
  . Race conditions, in which threads are accessing data or resources in an inconsistent order
  . Deadlocks, in which two threads are waiting for each other, preventing both threads from continuing
  . Bugs that only happen in certain situations and are hard to reproduce and fix reliably
  
- Programming languages implement threads in a few different ways, and many operating systems provide 
  an API the language it can call for creating new threads. The Rust standard library uses a 1:1 model
  of thread implementation, whereby a program uses one operating system thread per one language thread.
  There are crates that implement other models of threading that make different tradeoffs to the 1:1 model.

- The receiver has two useful methods: recv and try_recv. We’re using recv, short for receive, which 
  will block the main thread’s execution and wait until a value is sent down the channel. Once a value
  is sent, recv will return it in a Result<T, E>. When the transmitter closes, recv will return an error
  to signal that no more values will be coming. The try_recv method doesn’t block, but will instead return
  a Result<T, E> immediately: an Ok value holding a message if one is available and an Err value if there 
  aren’t any messages this time. Using try_recv is useful if this thread has other work to do while waiting
  for messages: we could write a loop that calls try_recv every so often, handles a message if one is 
  available, and otherwise does other work for a little while until checking again.

- Mutexes have a reputation for being difficult to use because you have to remember two rules:
. 1. You must attempt to acquire the lock before using the data.
. 2. When you’re done with the data that the mutex guards, you must
   unlock the data so other threads can acquire the lock.

- As you might suspect, Mutex<T> is a smart pointer. More accurately, the call to lock returns a smart 
  pointer called MutexGuard, wrapped in a LockResult that we handled with the call to unwrap. The 
  MutexGuard smart pointer implements Deref to point at our inner data; the smart pointer also has a 
  Drop implementation that releases the lock automatically when a MutexGuard goes out of scope, which 
  happens at the end of the inner scope . As a result, we don’t risk forgetting to release the lock and 
  blocking the mutex from being used by other threads because the lock release happens automatically.

- Unfortunately, Rc<T> is not safe to share across threads. When Rc<T> manages the reference count, it adds to the 
  count for each call to clone and subtracts from the count when each clone is dropped. But it doesn’t use any 
  concurrency primitives to make sure that changes to the count can’t be interrupted by another thread. This could
  lead to wrong counts—subtle bugs that could in turn lead to memory leaks or a value being dropped before we’re 
  done with it. What we need is a type that is exactly like Rc<T>, but that makes changes to the reference
  count in a thread-safe way.

- You might then wonder why all primitive types aren’t atomic and why standard library types aren’t implemented
  to use Arc<T> by default. The reason is that thread safety comes with a performance penalty that you only 
  want to pay when you really need to. If you’re just performing operations on values within a single 
  thread, your code can run faster if it doesn’t have to enforce the guarantees atomics provide.

- Allowing Transference of Ownership Between Threads with Send 
  The Send marker trait indicates that ownership of values of the type implementing Send can be transferred
  between threads. Almost every Rust type is Send, but there are some exceptions, including Rc<T>: this 
  cannot be Send because if you cloned an Rc<T> value and tried to transfer ownership of the clone to 
  another thread, both threads might update the reference count at the same time. For this reason, Rc<T>
  is implemented for use in single-threaded situations where you don’t want to pay the thread-safe 
  performance penalty.

- Allowing Access from Multiple Threads with Sync
  The Sync marker trait indicates that it is safe for the type implementing Sync to be referenced from 
  multiple threads. In other words, any type T is Sync if &T (an immutable reference to T) is Send, 
  meaning the reference can be sent safely to another thread. Similar to Send, primitive types are 
  Sync, and types composed entirely of types that are Sync are also Sync.


