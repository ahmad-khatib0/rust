- Cargo has two main profiles: the dev profile Cargo uses when you run cargo build, and the release 
  profile Cargo uses when you run cargo build --release. The dev profile is defined with good defaults
  for development, and the release profile has good defaults for release builds.

- We used the # Examples Markdown heading in Listing 14-1 to create a section in the HTML with the title
  “Examples.” Here are some other sections that crate authors commonly use in their documentation:
  . Panics The scenarios in which the function being documented could panic. Callers of 
    the function who don’t want their programs to panic should make sure they don’t call 
    the function in these situations.
  . Errors If the function returns a Result, describing the kinds of errors that might occur and what
    conditions might cause those errors to be returned can be helpful to callers so they can write
    code to handle the different kinds of errors in different ways.
  . Safety If the function is unsafe to call (Chapter 19), there should be a section explaining why 
    the function is unsafe and covering the invariants that the function expects callers to uphold.

- Documentation Comments as Tests
  Adding example code blocks in your documentation comments can help demonstrate how to use your library,
  and doing so has an additional bonus: running cargo test will run the code examples in your documentation 
  as tests! Nothing is better than documentation with examples. But nothing is worse than examples that 
  don’t work because the code has changed since the documentation was written. If we run cargo test with
  the documentation for the add_one function from Listing 14-1, we will see a section in the test results 
    Doc-tests my_crate
  running 1 test
  test src/lib.rs - add_one (line 5) ... ok
  
  test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0
  filtered out; finished in 0.27s

  Now, if we change either the function or the example so the assert_eq! in the example panics, and 
  run cargo test again, we’ll see that the doc tests catch that the example and the code are out of 
  sync with each other!

- Deprecating Versions from Crates.io with cargo yank
  Although you can’t remove previous versions of a crate, you can prevent any future projects from 
  adding them as a new dependency. This is useful when a crate version is broken for one reason or
  another. In such situations, Cargo supports yanking a crate version. Yanking a version prevents new
  projects from depending on that version while allowing all existing projects that depend on it to
  continue. Essentially, a yank means that all projects with a Cargo.lock will not break, and any 
  future Cargo.lock files generated will not use the yanked version.
  To yank a version of a crate, in the directory of the crate that you’ve previously published, 
  run cargo yank and specify which version you want to yank. For example, if we’ve published a 
  crate named guessing_game version 1.0.1 and we want to yank it, in the project directory for 
  guessing_game we’d run:
    $ cargo yank --vers 1.0.1
      Updating crates.io index
      Yank guessing_game@1.0.1
  By adding --undo to the command, you can also undo a yank and allow projects to start 
  depending on a version again:
    $ cargo yank --vers 1.0.1 --undo
      Updating crates.io index
      Unyank guessing_game@1.0.1
  A yank does not delete any code. It cannot, for example, delete accidentally uploaded secrets. 
  If that happens, you must reset those secrets immediately.
  
- Depending on an External Package in a Workspace
  Notice that the workspace has only one Cargo.lock file at the top level, rather than having a Cargo.lock
  in each crate’s directory. This ensures that all crates are using the same version of all dependencies.
  If we add the rand package to the adder/Cargo.toml and add_one/Cargo.toml files, Cargo will resolve both
  of those to one version of rand and record that in the one Cargo.lock. Making all crates in the workspace
  use the same dependencies means the crates will always be compatible with each other. 

