
# The isize and usize types hold pointer-sized signed and unsigned integers, 32 bits long on 32-bit
  platforms, and 64 bits long on 64-bit platforms
# mut makes the variable assignable 
# The ! character marks this as a macro invocation, not a function call.
# Rust only infers types within function bodies: you must write out the types of function parameters 
  and return values,
  
# Attributes are an open-ended system for marking functions and other declarations with extra information, like
# attributes in C++ and C#, or annotations in Java. They’re used to control compiler warnings and code style checks

- The full job of read_line is to take whatever the user types into standard input and append that 
  into a string (without overwriting its contents), so we therefore pass that string as an argument. 
  The string argument needs to be mutable so the method can change the string’s content.
  
- A scalar type represents a single value. Rust has four primary scalar
  types: integers, floating-point numbers, Booleans, and characters.

- Each signed variant can store numbers from –(2^n – 1) to 2^n – 1 – 1 inclusive, where n is the number
  of bits that variant uses. So an i8 can store numbers from –(2^7) to 2^7 – 1, which equals –128 to 127.
  
- Unsigned variants can store numbers from 0 to 2^n – 1, so a u8 can store numbers 
  from 0 to 2^8 – 1, which equals 0 to 255.
  
- Additionally, the isize and usize types depend on the architecture of the computer your 
  program is running on, which is denoted in the table as “arch”: 64 bits if you’re on 
  a 64-bit architecture and 32 bits if you’re on a 32-bit architecture.

- INTEGER OVERFLOW
  Let’s say you have a variable of type u8 that can hold values between 0 and 255. If you try to change
  the variable to a value outside that range, such as 256, integer overflow will occur, which can result
  in one of two behaviors. When you’re compiling in debug mode, Rust includes checks for integer overflow
  that cause your program to panic at runtime if this behavior occurs. Rust uses the term panicking when 
  a program exits with an error; When you’re compiling in release mode with the --release flag, Rust does
  not include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs 
  two’s complement wrapping. In short, values greater than the maximum value the type can hold 
  “wrap around” to the minimum of the values the type can hold. In the case of a u8, the value 256 
  becomes 0, the value 257 becomes 1, and so on. The program won’t panic, but the variable will have 
  a value that probably isn’t what you were expecting it to have. Relying on integer overflow’s wrapping
  behavior is considered an error. To explicitly handle the possibility of overflow, you can use these 
  families of methods provided by the standard library for primitive numeric types:
    . Wrap in all modes with the wrapping_* methods, such as wrapping_add.
    . Return the None value if there is overflow with the checked_* methods.
    . Return the value and a Boolean indicating whether there was overflow with the overflowing_* methods.
    . Saturate at the value’s minimum or maximum values with the saturating_* methods.

- Rust’s floating-point types are f32 and f64, which are 32 bits and 64 bits in size, respectively. 
  The default type is f64 because on modern CPUs, it’s roughly the same speed as f32 but is capable 
  of more precision. All floating-point types are signed.

- Note that we specify char literals with single quotes, as opposed to string literals, which use double
  quotes. Rust’s char type is four bytes in size and represents a Unicode scalar value, which means it 
  can represent a lot more than just ASCII. Accented letters; Chinese, Japanese, and Korean characters; 
  emoji; and zero-width spaces are all valid char values in Rust. Unicode scalar values range from U+0000
  to U+D7FF and U+E000 to U+10FFFF inclusive. However, a “character” isn’t really a concept in Unicode,
  so your human intuition for what a “character” is may not match up with what a char is in Rust.
  
- You can put any kind of data inside an enum variant: strings, numeric types, or structs, 
  for example. You can even include another enum! 

- We discuss strings in the context of collections because strings are implemented as a collection of
  bytes, plus some methods to provide useful functionality when those bytes are interpreted as text.

- Many of the same operations available with Vec<T> are available with String as well because String is
  actually implemented as a wrapper around a vector of bytes with some extra guarantees, restrictions,
  and capabilities. An example of a function that works the same way with Vec<T> and String is the 
  new function to create an instance, 

- Another point about UTF-8 is that there are actually three relevant ways to look at strings from 
  Rust’s perspective: as bytes, scalar values, and grapheme clusters (the closest thing to what we 
  would call letters).

- Indexing into a string is often a bad idea because it’s not clear what the return type of the 
  string-indexing operation should be: a byte value, a character, a grapheme cluster, or a string slice.

- The best way to operate on pieces of strings is to be explicit about whether you want characters 
  or bytes. For individual Unicode scalar values, use the chars method.

- Rust doesn’t have exceptions. Instead, it has the type Result<T, E> for recoverable errors and 
  the panic! macro that stops execution when the program encounters an unrecoverable error.

- Performance of Code Using Generics
  You might be wondering whether there is a runtime cost when using generic type parameters. The good news 
  is that using generic types won’t make your program run any slower than it would with concrete types.
  Rust accomplishes this by performing monomorphization of the code using generics at compile time. 
  Monomorphization is the process of turning generic code into specific code by filling in the
  concrete types that are used when compiled. In this process, the compiler does the opposite of the 
  steps we used to create the generic function in Listing 10-5: the compiler looks at all the places 
  where generic code is called and generates code for the concrete types the generic code is called with.

- A trait defines the functionality a particular type has and can share with other types. We can use 
  traits to define shared behavior in an abstract way. We can use trait bounds to specify that a 
  generic type can be any type that has certain behavior.

- Traits are similar to a feature often called interfaces in other languages, 
  although with some differences.

- we can’t implement external traits on external types. For example, we can’t implement the Display 
  trait on Vec<T> within our aggregator crate because Display and Vec<T> are both defined in the
  standard library and aren’t local to our aggregator crate. This restriction is part of a property 
  called coherence, and more specifically the orphan rule, so named because the parent type is not
  present. This rule ensures that other people’s code can’t break your code and vice versa. Without 
  the rule, two crates could implement the same trait for the same type, and Rust wouldn’t know 
  which implementation to use.

- Default Implementations
  Sometimes it’s useful to have default behavior for some or all of the methods in a trait instead 
  of requiring implementations for all methods on every type. Then, as we implement the trait on a 
  particular type, we can keep or override each method’s default behavior.

- We can also conditionally implement a trait for any type that implements another trait. Implementations
  of a trait on any type that satisfies the trait bounds are called blanket implementations and are used 
  extensively in the Rust standard library. For example, the standard library implements the ToString 
  trait on any type that implements the Display trait. The impl block in the standard library looks:
    impl<T: Display> ToString for T {
      --snip--
    }

- Lifetime Annotation Syntax 
  Lifetime annotations don’t change how long any of the references live. Rather, they describe the 
  relationships of the lifetimes of multiple references to each other without affecting the lifetimes. 
  Just as functions can accept any type when the signature specifies a generic type parameter, 
  functions can accept references with any lifetime by specifying a generic lifetime parameter.  

- You might see suggestions to use the 'static lifetime in error messages. But before specifying 
  'static as the lifetime for a reference, think about whether the reference you have actually lives 
  the entire lifetime of your program or not, and whether you want it to. Most of the time, an error 
  message suggesting the 'static lifetime results from attempting to create a dangling reference or a 
  mismatch of the available lifetimes. In such cases, the solution is to fix those
  problems, not to specify the 'static lifetime.


