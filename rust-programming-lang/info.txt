
# The isize and usize types hold pointer-sized signed and unsigned integers, 32 bits long on 32-bit
  platforms, and 64 bits long on 64-bit platforms
# mut makes the variable assignable 
# The ! character marks this as a macro invocation, not a function call.
# Rust only infers types within function bodies: you must write out the types of function parameters 
  and return values,
  
# Attributes are an open-ended system for marking functions and other declarations with extra information, like
# attributes in C++ and C#, or annotations in Java. They’re used to control compiler warnings and code style checks

- The full job of read_line is to take whatever the user types into standard input and append that 
  into a string (without overwriting its contents), so we therefore pass that string as an argument. 
  The string argument needs to be mutable so the method can change the string’s content.
  
- A scalar type represents a single value. Rust has four primary scalar
  types: integers, floating-point numbers, Booleans, and characters.

- Each signed variant can store numbers from –(2^n – 1) to 2^n – 1 – 1 inclusive, where n is the number
  of bits that variant uses. So an i8 can store numbers from –(2^7) to 2^7 – 1, which equals –128 to 127.
  
- Unsigned variants can store numbers from 0 to 2^n – 1, so a u8 can store numbers 
  from 0 to 2^8 – 1, which equals 0 to 255.
  
- Additionally, the isize and usize types depend on the architecture of the computer your 
  program is running on, which is denoted in the table as “arch”: 64 bits if you’re on 
  a 64-bit architecture and 32 bits if you’re on a 32-bit architecture.

- INTEGER OVERFLOW
  Let’s say you have a variable of type u8 that can hold values between 0 and 255. If you try to change
  the variable to a value outside that range, such as 256, integer overflow will occur, which can result
  in one of two behaviors. When you’re compiling in debug mode, Rust includes checks for integer overflow
  that cause your program to panic at runtime if this behavior occurs. Rust uses the term panicking when 
  a program exits with an error; When you’re compiling in release mode with the --release flag, Rust does
  not include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs 
  two’s complement wrapping. In short, values greater than the maximum value the type can hold 
  “wrap around” to the minimum of the values the type can hold. In the case of a u8, the value 256 
  becomes 0, the value 257 becomes 1, and so on. The program won’t panic, but the variable will have 
  a value that probably isn’t what you were expecting it to have. Relying on integer overflow’s wrapping
  behavior is considered an error. To explicitly handle the possibility of overflow, you can use these 
  families of methods provided by the standard library for primitive numeric types:
    . Wrap in all modes with the wrapping_* methods, such as wrapping_add.
    . Return the None value if there is overflow with the checked_* methods.
    . Return the value and a Boolean indicating whether there was overflow with the overflowing_* methods.
    . Saturate at the value’s minimum or maximum values with the saturating_* methods.

- Rust’s floating-point types are f32 and f64, which are 32 bits and 64 bits in size, respectively. 
  The default type is f64 because on modern CPUs, it’s roughly the same speed as f32 but is capable 
  of more precision. All floating-point types are signed.

- Note that we specify char literals with single quotes, as opposed to string literals, which use double
  quotes. Rust’s char type is four bytes in size and represents a Unicode scalar value, which means it 
  can represent a lot more than just ASCII. Accented letters; Chinese, Japanese, and Korean characters; 
  emoji; and zero-width spaces are all valid char values in Rust. Unicode scalar values range from U+0000
  to U+D7FF and U+E000 to U+10FFFF inclusive. However, a “character” isn’t really a concept in Unicode,
  so your human intuition for what a “character” is may not match up with what a char is in Rust.
  
- You can put any kind of data inside an enum variant: strings, numeric types, or structs, 
  for example. You can even include another enum! 


