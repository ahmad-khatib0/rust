
- Because integration tests go in a different directory, they don’t need the #[cfg(test)] annotation.
  However, because unit tests go in the same files as the code, you’ll use #[cfg(test)] to specify that
  they shouldn’t be included in the compiled result.

- The attribute cfg stands for configuration and tells Rust that the following item should only be included
  given a certain configuration option. In this case, the configuration option is test, which is provided 
  by Rust for compiling and running tests. By using the cfg attribute, Cargo compiles our test code only 
  if we actively run the tests with cargo test. This includes any helper functions that might be within 
  this module, in addition to the functions annotated with # [test]

- Testing Private Functions
  There’s debate within the testing community about whether or not private functions should be tested 
  directly, and other languages make it difficult or impossible to test private functions. Regardless 
  of which testing ideology you adhere to, Rust’s privacy rules do allow you to test private functions. 

- Integration Tests
  In Rust, integration tests are entirely external to your library. They use your library in the same way
  any other code would, which means they can only call functions that are part of your library’s public 
  API. Their purpose is to test whether many parts of your library work together correctly. Units of code 
  that work correctly on their own could have problems when integrated, so test coverage of the integrated
  code is important as well. To create integration tests, you first need a tests directory.

- Integration Tests for Binary Crates
  If our project is a binary crate that only contains a src/main.rs file and doesn’t have a src/lib.rs
  file, we can’t create integration tests in the tests directory and bring functions defined in the 
  src/main.rs file into scope with a use statement. Only library crates expose functions that other 
  crates can use; binary crates are meant to be run on their own. src/main.rs file will work as well,
  and that small amount of code doesn’t need to be tested.



