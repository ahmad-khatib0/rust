
$ cargo new project   --vcs      # escape git
$ cargo new project_name
$ cargo new restaurant --lib     # crate 
$ cargo build 
$ cargo run 
$ cargo check
$ cargo clean                    # clean generated files 

$ cargo build --release 
  to compile it with optimizations. This command will create an executable in target/release instead 
  of target/debug. The optimizations make your Rust code run faster, but turning them on lengthens the
  time it takes for your program to compile. This is why there are two different profiles: one for 
  development, when you want to rebuild quickly and often, and another for building the final program 
  you’ll give to a user that won’t be rebuilt repeatedly and that will run as fast as possible. 
  If you’re benchmarking your code’s running time, be sure to run cargo build --release and benchmark
  with the executable in target/release.

$ cargo update

# build the doc for crate used in the project
$ cargo doc --open

$ env RUST_BACKTRACE=1 

# If you don’t want to run the tests in parallel
$ cargo test -- --test-threads=1

# Showing Function Output (like println)
$ cargo test -- --show-output

# run only one test 
$ cargo test this_test_will_pass       

# ran all tests with add in the name: 
$ cargo test add 

$ cargo test -- --ignored
$ cargo test -- --include-ignored




