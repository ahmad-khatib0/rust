
- Ownership Rules
  .. Each value in Rust has an owner.
  .. There can only be one owner at a time.
  .. When the owner goes out of scope, the value will be dropped.

- There is a natural point at which we can return the memory our String needs to the allocator: when s 
  goes out of scope. When a variable goes out of scope, Rust calls a special function for us. This 
  function is called drop, and it’s where the author of String can put the code to return the memory. 
  Rust calls drop automatically at the closing curly bracket.
  NOTE
  In C++, this pattern of deallocating resources at the end of an item’s lifetime is sometimes called 
  Resource Acquisition Is Initialization (RAII). The drop function in Rust will be familiar
  to you if you’ve used RAII patterns.

- Rust has a special annotation called the Copy trait that we can place on types that are stored
  on the stack, as integers are. If a type implements the Copy trait, variables that use it do
  not move, but rather are trivially copied, making them still valid after assignment to another 
  variable. Rust won’t let us annotate a type with Copy if the type, or any of its parts, has 
  implemented the Drop trait. If the type needs something special to happen when the value goes
  out of scope and we add the Copy annotation to that type, we’ll get a compile-time error. 
  To learn about how to add the Copy annotation to your type to implement the trait, see Appendix C.

- So, what types implement the Copy trait? You can check the documentation for the given type
  to be sure, but as a general rule, any group of simple scalar values can implement Copy, and
  nothing that requires allocation or is some form of resource can implement Copy. Here are 
  some of the types that implement Copy:
- All the integer types, such as u32.
- The Boolean type, bool, with values true and false.
- All the floating-point types, such as f64.
- The character type, char.
- Tuples, if they only contain types that also implement Copy. For example, (i32, i32)
  implements Copy, but (i32, String) does not.

- We call the action of creating a reference borrowing. As in real life, if a person owns something,
  you can borrow it from them. When you’re done, you have to give it back. You don’t own it.

- A data race is similar to a race condition and happens when these three behaviors occur:
  .. Two or more pointers access the same data at the same time.
  .. At least one of the pointers is being used to write to the data.
  .. There’s no mechanism being used to synchronize access to the data.

- The Rules of References
. At any given time, you can have either one mutable reference or any number of immutable references.
. References must always be valid.

- The Slice Type
  Slices let you reference a contiguous sequence of elements in a collection rather than 
  the whole collection. A slice is a kind of reference, so it does not have ownership.

- String slice range indices must occur at valid UTF-8 character boundaries. If you attempt to create
  a string slice in the middle of a multibyte character, your program will exit with an error. For the
  purposes of introducing string slices, we are assuming ASCII only in this section

